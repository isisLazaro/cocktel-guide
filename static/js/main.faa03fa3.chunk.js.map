{"version":3,"sources":["constants/Constants.js","components/TitleBanner.js","components/Search.js","components/Cocktails.js","utils/Fetching.js","App.js","components/Recipe.js","router/index.js","serviceWorker.js","index.js"],"names":["SEARCH_BYNAME_ENDPOINT","DEFAULT_NAME","Title","styled","h1","Wrapper","section","TitleBanner","props","appTitle","Input","input","attrs","className","Button","button","Search","onSubmit","getData","type","name","placeholder","required","StyledLink","Link","Cocktails","cocktails","map","cocktail","key","idDrink","src","strDrinkThumb","alt","strDrink","to","pathname","state","recipe","Fetching","url","a","async","fetch","api_call","json","data","App","event","preventDefault","cocktailName","target","elements","value","drinks","console","log","setState","componentDidMount","this","Component","Recipe","activeRecipe","title","location","req","res","strInstructions","React","Router","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.faa03fa3.chunk.js","sourcesContent":["export const SEARCH_BYNAME_ENDPOINT = `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=`;\r\nexport const DEFAULT_NAME = `tequila`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/* title component */\r\nconst Title = styled.h1`\r\n  font-size: 2.5em;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  color: palevioletred;\r\n`;\r\n\r\n/* wrapper component */\r\nconst Wrapper = styled.section`\r\n  padding: 3em;\r\n  background: papayawhip;\r\n`;\r\n\r\nconst TitleBanner = props => (\r\n  <Wrapper>\r\n    <Title>{props.appTitle}</Title>\r\n  </Wrapper>\r\n);\r\n\r\nexport default TitleBanner;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Input = styled.input.attrs(props => ({\r\n  className: \"input\"\r\n}))`\r\n  border: 1px solid palevioletred;\r\n  display: inline;\r\n`;\r\n\r\nconst Button = styled.button.attrs(props => ({\r\n  className: \"button\"\r\n}))`\r\n  color: palevioletred;\r\n  border: 1px solid palevioletred;\r\n`;\r\n\r\nconst Search = props => (\r\n  <section className=\"section\">\r\n    <form onSubmit={props.getData}>\r\n      <label className=\"label has-text-centered\">Search cocktail by name</label>\r\n      <div className=\"field has-addons has-addons-centered  \">\r\n        <div className=\"control\">\r\n          <Input\r\n            type=\"text\"\r\n            name=\"cocktailName\"\r\n            placeholder=\"ex. margarita\"\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"control\">\r\n          <Button className=\"button\">Search</Button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </section>\r\n);\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledLink = styled(Link)`\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Cocktails = props =>\r\n  props.cocktails.map(cocktail => {\r\n    return (\r\n      <div className=\"column is-one-third\" key={cocktail.idDrink}>\r\n        <div className=\"card-image\">\r\n          <figure className=\"image\">\r\n            <img src={cocktail.strDrinkThumb} alt={cocktail.strDrink} />\r\n          </figure>\r\n        </div>\r\n        <div className=\"card-content has-text-centered\">\r\n          <p className=\"title is-5\">{cocktail.strDrink}</p>\r\n          <button className=\"button\">\r\n            <StyledLink\r\n              to={{\r\n                pathname: `/recipe/${cocktail.idDrink}`,\r\n                state: { recipe: cocktail.idDrink }\r\n              }}\r\n            >\r\n              Recipe\r\n            </StyledLink>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n\r\nexport default Cocktails;\r\n","const Fetching = async url => {\r\n  const api_call = await fetch(url);\r\n  const data = await api_call.json();\r\n  return data;\r\n};\r\n\r\nexport default Fetching;\r\n","import React, { Component } from \"react\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nimport { SEARCH_BYNAME_ENDPOINT, DEFAULT_NAME } from \"./constants/Constants\";\r\n\r\nimport TitleBanner from \"./components/TitleBanner\";\r\nimport Search from \"./components/Search\";\r\nimport Cocktails from \"./components/Cocktails\";\r\nimport Fetching from \"./utils/Fetching\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cocktails: []\r\n  };\r\n\r\n  getData = async event => {\r\n    event.preventDefault();\r\n    const cocktailName = event.target.elements.cocktailName.value;\r\n    const data = await Fetching(`${SEARCH_BYNAME_ENDPOINT}${cocktailName}`);\r\n    if (data.drinks === null) {\r\n      data.drinks = [];\r\n    }\r\n    console.log(data.drinks);\r\n    this.setState({ cocktails: data.drinks });\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    const data = await Fetching(`${SEARCH_BYNAME_ENDPOINT}${DEFAULT_NAME}`);\r\n    this.setState({ cocktails: data.drinks });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TitleBanner appTitle=\"Cocktail Guide 🍸\" />\r\n        {/* <Search getData={this.getData} /> */}\r\n        <Search getData={this.getData} />\r\n        <div className=\"section\">\r\n          <div className=\"columns is-multiline\">\r\n            <Cocktails cocktails={this.state.cocktails} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Recipe extends React.Component {\r\n  state = {\r\n    activeRecipe: []\r\n  };\r\n  componentDidMount = async () => {\r\n    const title = this.props.location.state.recipe;\r\n    const req = await fetch(\r\n      `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${title}`\r\n    );\r\n    const res = await req.json();\r\n    this.setState({ activeRecipe: res.drinks[0] });\r\n    console.log(this.state.activeRecipe);\r\n  };\r\n  render() {\r\n    const recipe = this.state.activeRecipe;\r\n    return (\r\n      <section className=\"section\">\r\n        <div className=\"container\">\r\n          <p>{recipe.strInstructions}</p>\r\n          <p>\r\n            <button className=\"button\">\r\n              <Link to=\"/\"> back</Link>\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Recipe;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport App from \"../App\";\r\nimport Recipe from \"../components/Recipe\";\r\n\r\nconst Router = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path=\"/\" component={App} exact />\r\n      <Route path=\"/recipe/:id\" component={Recipe} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Router from \"./router/index\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Router />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}